;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{}, :name com.rpl.specter, :imports nil, :requires {com.rpl.specter.protocols com.rpl.specter.protocols, i com.rpl.specter.impl, com.rpl.specter.impl com.rpl.specter.impl}, :uses {comp-paths* com.rpl.specter.protocols, StructurePath com.rpl.specter.protocols}, :defs {compiled-select-one {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 24, :column 7, :end-line 24, :end-column 26, :arglists (quote ([selector structure])), :doc "Version of select-one that takes in a selector pre-compiled with comp-paths"}, :name com.rpl.specter/compiled-select-one, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 26, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Version of select-one that takes in a selector pre-compiled with comp-paths"}, comp-paths {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 10, :column 7, :end-line 10, :end-column 17, :arglists (quote ([& paths])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(paths)], :arglists ([& paths]), :arglists-meta (nil)}}, :name com.rpl.specter/comp-paths, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(paths)], :arglists ([& paths]), :arglists-meta (nil)}, :method-params [(paths)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 0, :fn-var true, :arglists ([& paths])}, selected? {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 139, :column 7, :end-line 139, :end-column 16, :arglists (quote ([& selectors])), :doc "Filters the current value based on whether a selector finds anything.\n  e.g. (selected? :vals ALL even?) keeps the current element only if an\n  even number exists for the :vals key", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}}, :name com.rpl.specter/selected?, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selectors)], :arglists ([& selectors]), :arglists-meta (nil)}, :method-params [(selectors)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 0, :fn-var true, :arglists ([& selectors]), :doc "Filters the current value based on whether a selector finds anything.\n  e.g. (selected? :vals ALL even?) keeps the current element only if an\n  even number exists for the :vals key"}, srange {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 123, :column 7, :end-line 123, :end-column 13, :arglists (quote ([start end]))}, :name com.rpl.specter/srange, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 13, :method-params ([start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start end]))}, view {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 137, :column 7, :end-line 137, :end-column 11, :arglists (quote ([afn]))}, :name com.rpl.specter/view, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 11, :method-params ([afn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([afn]))}, BEGINNING {:name com.rpl.specter/BEGINNING, :file "src/com/rpl/specter.cljc", :line 125, :column 1, :end-line 125, :end-column 15, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 125, :column 6, :end-line 125, :end-column 15}}, LAST {:name com.rpl.specter/LAST, :file "src/com/rpl/specter.cljc", :line 117, :column 1, :end-line 117, :end-column 10, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 117, :column 6, :end-line 117, :end-column 10}}, select {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([selector structure])), :doc "Navigates to and returns a sequence of all the elements specified by the selector."}, :name com.rpl.specter/select, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 13, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Navigates to and returns a sequence of all the elements specified by the selector."}, srange-dynamic {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 121, :column 7, :end-line 121, :end-column 21, :arglists (quote ([start-fn end-fn]))}, :name com.rpl.specter/srange-dynamic, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 21, :method-params ([start-fn end-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([start-fn end-fn]))}, StructurePath {:impls (js/Function cljs.core/Keyword)}, compiled-setval {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 73, :column 7, :end-line 73, :end-column 22, :arglists (quote ([selector val structure])), :doc "Version of setval that takes in a selector pre-compiled with comp-paths"}, :name com.rpl.specter/compiled-setval, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 22, :method-params ([selector val structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists (quote ([selector val structure])), :doc "Version of setval that takes in a selector pre-compiled with comp-paths"}, setval {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 78, :column 7, :end-line 78, :end-column 13, :arglists (quote ([selector val structure])), :doc "Navigates to each value specified by the selector and replaces it by val"}, :name com.rpl.specter/setval, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 13, :method-params ([selector val structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 3, :fn-var true, :arglists (quote ([selector val structure])), :doc "Navigates to each value specified by the selector and replaces it by val"}, putval {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 175, :column 7, :end-line 175, :end-column 13, :arglists (quote ([val])), :doc "Adds an external value to the collected vals. Useful when additional arguments\n  are required to the transform function that would otherwise require partial\n  application or a wrapper function.\n\n  e.g., incrementing val at path [:a :b] by 3:\n  (transform [:a :b (putval 3)] + some-map)"}, :name com.rpl.specter/putval, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 13, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Adds an external value to the collected vals. Useful when additional arguments\n  are required to the transform function that would otherwise require partial\n  application or a wrapper function.\n\n  e.g., incrementing val at path [:a :b] by 3:\n  (transform [:a :b (putval 3)] + some-map)"}, codewalker {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 131, :column 7, :end-line 131, :end-column 17, :arglists (quote ([afn]))}, :name com.rpl.specter/codewalker, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 17, :method-params ([afn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([afn]))}, transform {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 67, :column 7, :end-line 67, :end-column 16, :arglists (quote ([selector transform-fn structure])), :doc "Navigates to each value specified by the selector and replaces it by the result of running\n  the transform-fn on it"}, :name com.rpl.specter/transform, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 16, :method-params ([selector transform-fn structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([selector transform-fn structure])), :doc "Navigates to each value specified by the selector and replaces it by the result of running\n  the transform-fn on it"}, select-one {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 33, :column 7, :end-line 33, :end-column 17, :arglists (quote ([selector structure])), :doc "Like select, but returns either one element or nil. Throws exception if multiple elements found"}, :name com.rpl.specter/select-one, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 17, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Like select, but returns either one element or nil. Throws exception if multiple elements found"}, filterer {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 133, :column 7, :end-line 133, :end-column 15, :arglists (quote ([& path])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(path)], :arglists ([& path]), :arglists-meta (nil)}}, :name com.rpl.specter/filterer, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(path)], :arglists ([& path]), :arglists-meta (nil)}, :method-params [(path)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 0, :fn-var true, :arglists ([& path])}, compiled-select-one! {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 38, :column 7, :end-line 38, :end-column 27, :arglists (quote ([selector structure])), :doc "Version of select-one! that takes in a selector pre-compiled with comp-paths"}, :name com.rpl.specter/compiled-select-one!, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 27, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Version of select-one! that takes in a selector pre-compiled with comp-paths"}, collect-one {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 172, :column 7, :end-line 172, :end-column 18, :arglists (quote ([& selector])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selector)], :arglists ([& selector]), :arglists-meta (nil)}}, :name com.rpl.specter/collect-one, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selector)], :arglists ([& selector]), :arglists-meta (nil)}, :method-params [(selector)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 0, :fn-var true, :arglists ([& selector])}, compiled-select {:name com.rpl.specter/compiled-select, :file "src/com/rpl/specter.cljc", :line 15, :column 1, :end-line 16, :end-column 18, :doc "Version of select that takes in a selector pre-compiled with comp-paths", :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 16, :column 3, :end-line 16, :end-column 18, :doc "Version of select that takes in a selector pre-compiled with comp-paths"}}, VAL {:name com.rpl.specter/VAL, :file "src/com/rpl/specter.cljc", :line 115, :column 1, :end-line 115, :end-column 9, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 115, :column 6, :end-line 115, :end-column 9}}, cond-path {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 185, :column 7, :end-line 185, :end-column 16, :arglists (quote ([& conds])), :doc "Takes in alternating cond-path selector cond-path selector...\n   Tests the structure if selecting with cond-path returns anything.\n   If so, it uses the following selector for this portion of the navigation.\n   Otherwise, it tries the next cond-path. If nothing matches, then the structure\n   is not selected.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(conds)], :arglists ([& conds]), :arglists-meta (nil)}}, :name com.rpl.specter/cond-path, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(conds)], :arglists ([& conds]), :arglists-meta (nil)}, :method-params [(conds)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 0, :fn-var true, :arglists ([& conds]), :doc "Takes in alternating cond-path selector cond-path selector...\n   Tests the structure if selecting with cond-path returns anything.\n   If so, it uses the following selector for this portion of the navigation.\n   Otherwise, it tries the next cond-path. If nothing matches, then the structure\n   is not selected."}, compiled-select-first {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 51, :column 7, :end-line 51, :end-column 28, :arglists (quote ([selector structure])), :doc "Version of select-first that takes in a selector pre-compiled with comp-paths"}, :name com.rpl.specter/compiled-select-first, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 28, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Version of select-first that takes in a selector pre-compiled with comp-paths"}, compiled-transform {:name com.rpl.specter/compiled-transform, :file "src/com/rpl/specter.cljc", :line 64, :column 1, :end-line 65, :end-column 21, :doc "Version of transform that takes in a selector pre-compiled with comp-paths", :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 65, :column 3, :end-line 65, :end-column 21, :doc "Version of transform that takes in a selector pre-compiled with comp-paths"}}, select-first {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 56, :column 7, :end-line 56, :end-column 19, :arglists (quote ([selector structure])), :doc "Returns first element found. Not any more efficient than select, just a convenience"}, :name com.rpl.specter/select-first, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 19, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Returns first element found. Not any more efficient than select, just a convenience"}, FIRST {:name com.rpl.specter/FIRST, :file "src/com/rpl/specter.cljc", :line 119, :column 1, :end-line 119, :end-column 11, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 119, :column 6, :end-line 119, :end-column 11}}, collect {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 169, :column 7, :end-line 169, :end-column 14, :arglists (quote ([& selector])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selector)], :arglists ([& selector]), :arglists-meta (nil)}}, :name com.rpl.specter/collect, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(selector)], :arglists ([& selector]), :arglists-meta (nil)}, :method-params [(selector)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 0, :fn-var true, :arglists ([& selector])}, END {:name com.rpl.specter/END, :file "src/com/rpl/specter.cljc", :line 127, :column 1, :end-line 127, :end-column 9, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 127, :column 6, :end-line 127, :end-column 9}}, replace-in {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 102, :column 7, :end-line 102, :end-column 17, :arglists (quote ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}])), :doc "Similar to transform, except returns a pair of [transformd-structure sequence-of-user-ret].\n  The transform-fn in this case is expected to return [ret user-ret]. ret is\n   what's used to transform the data structure, while user-ret will be added to the user-ret sequence\n   in the final return. replace-in is useful for situations where you need to know the specific values\n   of what was transformd in the data structure.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(selector transform-fn structure {:keys [merge-fn], :or {merge-fn concat}})], :arglists ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}]), :arglists-meta (nil)}}, :name com.rpl.specter/replace-in, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(selector transform-fn structure {:keys [merge-fn], :or {merge-fn concat}})], :arglists ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}]), :arglists-meta (nil)}, :method-params [(selector transform-fn structure {:keys [merge-fn], :or {merge-fn concat}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 3, :fn-var true, :arglists ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}]), :doc "Similar to transform, except returns a pair of [transformd-structure sequence-of-user-ret].\n  The transform-fn in this case is expected to return [ret user-ret]. ret is\n   what's used to transform the data structure, while user-ret will be added to the user-ret sequence\n   in the final return. replace-in is useful for situations where you need to know the specific values\n   of what was transformd in the data structure."}, keypath {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 135, :column 7, :end-line 135, :end-column 14, :arglists (quote ([akey]))}, :name com.rpl.specter/keypath, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 14, :method-params ([akey]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([akey]))}, select-one! {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 46, :column 7, :end-line 46, :end-column 18, :arglists (quote ([selector structure])), :doc "Returns exactly one element, throws exception if zero or multiple elements found"}, :name com.rpl.specter/select-one!, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 18, :method-params ([selector structure]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([selector structure])), :doc "Returns exactly one element, throws exception if zero or multiple elements found"}, compiled-replace-in {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 83, :column 7, :end-line 83, :end-column 26, :arglists (quote ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}])), :doc "Version of replace-in that takes in a selector pre-compiled with comp-paths", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(selector transform-fn structure {:keys [merge-fn], :or {merge-fn concat}})], :arglists ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}]), :arglists-meta (nil)}}, :name com.rpl.specter/compiled-replace-in, :variadic true, :file "src/com/rpl/specter.cljc", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(selector transform-fn structure {:keys [merge-fn], :or {merge-fn concat}})], :arglists ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}]), :arglists-meta (nil)}, :method-params [(selector transform-fn structure {:keys [merge-fn], :or {merge-fn concat}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 3, :fn-var true, :arglists ([selector transform-fn structure & {:keys [merge-fn], :or {merge-fn concat}}]), :doc "Version of replace-in that takes in a selector pre-compiled with comp-paths"}, walker {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 129, :column 7, :end-line 129, :end-column 13, :arglists (quote ([afn]))}, :name com.rpl.specter/walker, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 13, :method-params ([afn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([afn]))}, if-path {:protocol-inline nil, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 199, :column 7, :end-line 199, :end-column 14, :arglists (quote ([cond-fn if-path] [cond-fn if-path else-path])), :doc "Like cond-path, but with if semantics.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([cond-fn if-path] [cond-fn if-path else-path]), :arglists ([cond-fn if-path] [cond-fn if-path else-path]), :arglists-meta (nil nil)}}, :name com.rpl.specter/if-path, :variadic false, :file "src/com/rpl/specter.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([cond-fn if-path] [cond-fn if-path else-path]), :arglists ([cond-fn if-path] [cond-fn if-path else-path]), :arglists-meta (nil nil)}, :method-params ([cond-fn if-path] [cond-fn if-path else-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 3, :fn-var true, :arglists ([cond-fn if-path] [cond-fn if-path else-path]), :doc "Like cond-path, but with if semantics."}, ALL {:name com.rpl.specter/ALL, :file "src/com/rpl/specter.cljc", :line 113, :column 1, :end-line 113, :end-column 9, :meta {:file "/Users/pietromenna/git/specter/src/com/rpl/specter.cljc", :line 113, :column 6, :end-line 113, :end-column 9}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:merge-fn}, :order [:merge-fn]}, :doc nil}